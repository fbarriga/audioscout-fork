\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Overview}{1}}
\@writefile{toc}{\contentsline {paragraph}{AudioScout\texttrademark {} is a distributed content indexing system. It can index a large collection of audio content for the purpose of later recognition of unknown signals. Robust to noise, different encodings and other types of distortion, it can be used for a variety of applications including duplicate detection of files as well as more sophisticated uses involving the enforcement of copyrights and lawful use.}{1}}
\@writefile{toc}{\contentsline {paragraph}{The AudioScout\texttrademark {} system is a collection of servers that manage the storage and matching of audio signals in a large body of audio content. When new audio signals are added to the index, a compact hash is calculated based on low-level signal features. This hash serves as a temporal description of the signal. The hash values are then added as entries into one of the distributed tables. AudioScout additionally stores meta information associated with that signal into a database for later retrieval. For querys of unknown signals, its perceptual hash must be calculated in order to find the matching signal in the table and retrieve the associated metadata.}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Features}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Architecture}{3}}
\@writefile{toc}{\contentsline {paragraph}{The AudioScout central server manages the storage of perceptual hashes in the distributed table servers along with the storage and retrieval of metadata information. A perceptual hash is a compact temporal description of a signal's low level frequency characteristics. Audio Scout uses a perceptual hash algorithm to extract such a characterization from each signal. Matches are found by publishing the hash of the query signal to all the available table servers. Each table server tries to determine the unique id that is matched most often to the sequence and sends it back to the main server. The main server can then use this id to retrieve that entries' metadata from the metadata database server.}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Audio Scout Server}{3}}
\@writefile{toc}{\contentsline {paragraph}{This is the main server providing the ability to add new audio signals to the index as well as the ability to perform queries for the identification of unknown content. The server is a multi- threaded process servicing client requests in two modes: query and insertion. In query mode, the main server publishes the recieved hash to its network of table servers and waits for the result. If a match is found, the audio scout server recieves the unique id of the match from one of the table servers, and then, using this id, it retrieves the correct information from the metadata server for return to the client application. If not found, an empty message is returned. For insertions, a particular table is randomly chosen from the list of available servers, and the hash is published for that table to add to its index. The meta information which is included with the hash from the client application is stored in the metadata server. The unique id for that entry is returned to the client application. However, the source of that metadata is not strictly tied to the contents of the file; other client applications can easily be created to gather such information from other sources.}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Distributed Table Servers}{3}}
\@writefile{toc}{\contentsline {paragraph}{Each table server provides access to an associated file index of hash entries. Since hashing all audio files into an index can involve a very time consuming process - especially for hundreds, thousands or even millions of files - this distributed approach allows for concurrently building separate index files on any number of host machines. The size of each index file is only limited by the host machine's memory limitations. For this initial process of building the index, a utility program is provided to read the audio files, hash the files and then add them to the index.}{4}}
\@writefile{toc}{\contentsline {paragraph}{Once the index is built, The table servers can be started for each of these index files. Additional insertions can always be done through the main audio scout server interface or by termination of the server and adding to the index with the utility program. While terminating the table server does disable querys against that particular index's entries, it does not effect the overall operation of the system.}{4}}
\@writefile{toc}{\contentsline {paragraph}{It is important to note that new entries added through the audio scout server are not immediately added to the index, but are inserted into a temporary index file that can later be merged into the main index file. The Audio Scout system has included a simple means to merge the tables by sending user signals to the table server, which can conveniently be scheduled as a cron task. For this reason, new additions to the index are not immediately available, but must wait for the next merge operation. The reasons for this feature are twofold: (1) the index table used is a memory mapped file and is not accessible for write operations. The table must be closed and reopened in write mode, and (2) since deletions of entries is a tedious process, this can provide a filtering layer to the addition of new signals to ensure only legimate files are added.}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}MetaDataDB Server}{4}}
\@writefile{toc}{\contentsline {paragraph}{ The metadata server is a multi-threaded process that is a wrapper around a sqlite database for all the metadata. It operates in two modes: insertion of new entries and query by a unique id. It is meant to serve requests by the audio scout server, but it also allows convenient access to metadata through the sqlite utilities.}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Public API}{5}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Installation and Set Up}{5}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Tests}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}tblservd tests}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.2}metadatadb Tests}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Contact}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {8}Dependencies}{11}}
